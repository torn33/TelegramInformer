# -*- coding: utf-8 -*-
import datetime
import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
import asyncio
import aioschedule
try:
    file =open ("token.txt","r") #—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    token=file.read()
    bot = Bot(token=token)  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω
except:
    print("—Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    exit()
now = datetime.datetime.now()
bot = Bot(token=token)  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω
dp = Dispatcher(bot)

reg_mode = False
flag_infuser = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
flag_infpass = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
user_login = ""


def report_add(user_name,user_id):
    report = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + user_name + " c ID " + str(
        user_id) + " –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–ö–° –≤ " + str(now)
    print(report)
    f = open('report.txt', 'a')
    f.write(report + "\n")
    f.close()


@dp.message_handler(
    commands="start")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start" , –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è?", "–ö—Ç–æ –∑–∞–≤—Ç—Ä–∞?", "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
    keyboard.add(*buttons)
    await message.answer("–î–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–ª—É—à–∞—é... üìû", reply_markup=keyboard)


@dp.message_handler(commands="help")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "help", –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö
async def cmd_help(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n –ö–æ–º–∞–Ω–¥–∞ /date —á—Ç–æ–±—ã —Å–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å "
                         "–±–æ—Ç–æ–º\n –ö–æ–º–∞–Ω–¥–∞ /id —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n –ö–æ–º–∞–Ω–¥–∞ /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n –ö–æ–º–∞–Ω–¥–∞ /exitreg –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n")


@dp.message_handler(commands="date")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "date", –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async def cmd_date(message: types.Message):
    await message.answer(now)


@dp.message_handler(commands="id")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "id", –≤—ã–≤–æ–¥–∏—Ç id Telegram
async def cmd_id(message: types.Message):
    await message.answer(message.from_user.id)


@dp.message_handler(commands="reg")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "reg", –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def cmd_reg(message: types.Message):
    global reg_mode
    reg_mode = True
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –†–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω (–¥–ª—è –≤—ã—Ö–æ–¥–∞ /exitreg)\n")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ª–æ–≥–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û\n")


@dp.message_handler(commands="exitreg")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "exitreg", –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏
async def cmd_exitreg(message: types.Message):
    global reg_mode
    reg_mode = False
    await message.answer("–†–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω\n")


@dp.message_handler(lambda message: message.text == "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è?") #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
async def today(message: types.Message):
    flag_idfount = False
    users = pd.read_csv('Users.csv', delimiter=';')
    for ind in users.index:
        if users['tg_id'][ind] == message.from_user.id:
            flag_idfount = True
            await message.answer("–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º...")
            flag_inf = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                switches = pd.read_csv('VKS.csv', delimiter=';')
                today = now.strftime("%d.%m.%Y")
                for ind in switches.index:
                    if switches['date'][ind] == str(today):
                        answer = "–°–µ–≥–æ–¥–Ω—è " + str(today) + " –ø—Ä–∏—Ö–æ–¥–∏—Ç " + switches['name'][ind]
                        await message.answer(answer)
                        report_add(message.from_user.first_name,message.from_user.id)
                        flag_inf = True
                if flag_inf == False:
                    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! ¬Ø\_(„ÉÑ)_/¬Ø")

            except FileNotFoundError:
                await message.answer("–Ø –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–π –∂—É—Ä–Ω–∞–ª, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å üòï")
                print('–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')
            break

    if flag_idfount==False:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")




@dp.message_handler(lambda message: message.text == "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def all(message: types.Message):
    answer = ""
    flag_idfount = False
    users = pd.read_csv('Users.csv', delimiter=';')
    for ind in users.index:
        if users['tg_id'][ind] == message.from_user.id:
            flag_idfount = True
            await message.answer("–í—ã–∫–∞—Ç—ã–≤–∞—é...")
            try:
                switches = pd.read_csv('VKS.csv', delimiter=';')
                for ind in switches.index:
                    answerbufer = switches['date'][ind] + " - " + switches['name'][ind] + "\n"
                    answer += answerbufer
                await message.answer(answer)
                report_add(message.from_user.first_name, message.from_user.id)

            except FileNotFoundError:
                await message.answer("–Ø –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–π –∂—É—Ä–Ω–∞–ª, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å üòï")
                print('–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')
    if flag_idfount == False:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(lambda message: message.text == "–ö—Ç–æ –∑–∞–≤—Ç—Ä–∞?")
async def tomorrow(message: types.Message):
    flag_inf = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    flag_idfount = False
    users = pd.read_csv('Users.csv', delimiter=';')
    for ind in users.index:
        if users['tg_id'][ind] == message.from_user.id:
            flag_idfount = True
            await message.answer("–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º...")
            try:
                switches = pd.read_csv('VKS.csv', delimiter=';')
                tomorrowdate = datetime.date.today() + datetime.timedelta(days=1)
                for ind in switches.index:
                    if switches['date'][ind] == str(tomorrowdate.strftime("%d.%m.%Y")):
                        answer = "–ó–∞–≤—Ç—Ä–∞ " + str(tomorrowdate.strftime("%d.%m.%Y")) + " –ø—Ä–∏—Ö–æ–¥–∏—Ç " + switches['name'][ind]
                        await message.answer(answer)
                        report_add(message.from_user.first_name, message.from_user.id)
                        flag_inf = True
                if (flag_inf == False):
                    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! ¬Ø\_(„ÉÑ)_/¬Ø")

            except FileNotFoundError:
                await message.answer("–Ø –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–π –∂—É—Ä–Ω–∞–ª, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å üòï")
                print('–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')

    if flag_idfount == False:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler()
async def chat(message: types.Message):
    global reg_mode
    if not reg_mode:

        if (
                message.text.lower() == "–∏–¥–∏ –Ω–∞ —Ö—É–π" or message.text == "–∏–¥–∏ –Ω–∞—Ö—É–π" or message.text == "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–¥–∏ –Ω–∞—Ö—É–π!" or message.text == "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–¥–∏ –Ω–∞—Ö—É–π"):
            await message.answer(
                "–£–±–ª—é–¥–æ–∫, –º–∞—Ç—å —Ç–≤–æ—é, –∞ –Ω—É –∏–¥–∏ —Å—é–¥–∞, –≥–æ–≤–Ω–æ —Å–æ–±–∞—á—å–µ, —Ä–µ—à–∏–ª –∫–æ –º–Ω–µ –ª–µ–∑—Ç—å? –¢—ã, –∑–∞—Å—Ä–∞–Ω–µ—Ü –≤–æ–Ω—é—á–∏–π, –º–∞—Ç—å —Ç–≤–æ—é, –∞? –ù—É –∏–¥–∏ —Å—é–¥–∞, –ø–æ–ø—Ä–æ–±—É–π –º–µ–Ω—è —Ç—Ä–∞—Ö–Ω—É—Ç—å, —è —Ç–µ–±—è —Å–∞–º —Ç—Ä–∞—Ö–Ω—É, —É–±–ª—é–¥–æ–∫, –æ–Ω–∞–Ω–∏—Å—Ç —á–µ—Ä—Ç–æ–≤, –±—É–¥—å —Ç—ã –ø—Ä–æ–∫–ª—è—Ç, –∏–¥–∏ –∏–¥–∏–æ—Ç, —Ç—Ä–∞—Ö–∞—Ç—å —Ç–µ–±—è –∏ –≤—Å—é —Å–µ–º—å—é, –≥–æ–≤–Ω–æ —Å–æ–±–∞—á—å–µ, –∂–ª–æ–± –≤–æ–Ω—é—á–∏–π, –¥–µ—Ä—å–º–æ, —Å—É–∫–∞, –ø–∞–¥–ª–∞, –∏–¥–∏ —Å—é–¥–∞, –º–µ—Ä–∑–∞–≤–µ—Ü, –Ω–µ–≥–æ–¥—è–π, –≥–∞–¥, –∏–¥–∏ —Å—é–¥–∞, —Ç—ã ‚Äî –≥–æ–≤–Ω–æ, –∂–æ–ø–∞!")
        if (message.text.lower() == "—Å–ø–∞—Å–∏–±–æ"):
            await message.answer("üòé")
        else:
            await message.answer("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —è –î–∏—Å–ø–µ—Ç—á–µ—Ä! –ù–µ –ø–æ–Ω—è–ª,  –∂–º–∏ /start!")
    if reg_mode:
        global user_login
        global flag_infuser
        global flag_infpass
        try:

            switches = pd.read_csv('Users.csv', delimiter=';')
            for ind in switches.index:
                if switches['login'][ind].upper() == message.text.upper() and flag_infuser != True:
                    await message.answer("–ü—Ä–∏–≤–µ—Ç " + switches['login'][ind] + " –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å")
                    user_login = switches['login'][ind]
                    flag_infuser = True

            if flag_infuser != True:
                await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!¬Ø\_(„ÉÑ)_/¬Ø")

        except FileNotFoundError:
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüòï")
            print('–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')

        if flag_infuser == True and flag_infpass == False:
            try:

                switches = pd.read_csv('Users.csv', delimiter=';')
                for ind in switches.index:

                    if switches['pass'][ind] == message.text and switches['login'][ind]==user_login:
                        flag_infpass = True

                    if flag_infuser == True and flag_infpass == True :
                        switches.loc[ind,'tg_id'] = str(message.from_user.id)
                        switches.to_csv("Users.csv",sep=';', index=False, encoding='utf-8-sig')
                        report = "Telegram ID " + str(message.from_user.id) + " –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–Ω–∏—Ü–∏–∞–ª–∞–º " + user_login
                        await message.answer(report)
                        flag_infuser=False
                        flag_infpass=False

                        reg_mode=False
                        print(report)
                        f = open('report.txt', 'a')
                        f.write(report + "\n")
                        f.close()
                        break

                if message.text.upper() != user_login and message.text != switches['pass'][ind]:
                    await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω! ¬Ø\_(„ÉÑ)_/¬Ø")
            except :
                await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüòï")
                print('–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')






async def scheduler():
    aioschedule.every().day.at("20:00").do(evening_reminder)  # –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    aioschedule.every().day.at("05:30").do(morning_reminder)  # –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(scheduler())


async def evening_reminder():
    try:
        switches = pd.read_csv('VKS.csv', delimiter=';')
        tomorrowdate = datetime.date.today() + datetime.timedelta(days=1)  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        for ind in switches.index:
            if switches['date'][ind] == str(tomorrowdate.strftime("%d.%m.%Y")):  # –∏—â–µ–º –≤ —Ñ–∞–π–ª–µ —Å—Ç–æ—Ä–∫—É —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç–æ–π
                users = pd.read_csv('Users.csv', delimiter=';')
                for ind1 in users.index:
                    if users['login'][ind1] == switches['name'][ind]:

                        if str(users['tg_id'][ind1]) !='nan' and users['notification'][ind1] == 1:
                            answer = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä " + switches['name'][ind] + "! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n –ó–∞–¥–∞—á–∞ - –í–ö–°, –ü—Ä–∏–±—ã—Ç–∏–µ - 7:00 " + str(tomorrowdate.strftime("%d.%m.%Y"))
                            await bot.send_message(chat_id=int(users['tg_id'][ind1]), text=answer)
                            report = "–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ " + switches['name'][ind] + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ " + str(tomorrowdate.strftime("%d.%m.%Y"))
                            print(report)
                            f = open('report.txt', 'a')
                            f.write(report + "\n")
                            f.close()



    except FileNotFoundError:
        print('–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')


async def morning_reminder():
    try:
        switches = pd.read_csv('VKS.csv', delimiter=';')
        today = now.strftime("%d.%m.%Y")  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        for ind in switches.index:
            if switches['date'][ind] == str(
                    today):  # –∏—â–µ–º –≤ —Ñ–∞–π–ª–µ —Å—Ç–æ—Ä–∫—É —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç–æ–π
                users = pd.read_csv('Users.csv', delimiter=';')
                for ind1 in users.index:
                    if users['login'][ind1] == switches['name'][ind]:

                        if str(users['tg_id'][ind1]) != 'nan' and users['notification'][ind1] == 1:
                            answer = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ " + switches['name'][
                                ind] + "! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n –ó–∞–¥–∞—á–∞ - –í–ö–°, –ü—Ä–∏–±—ã—Ç–∏–µ - 7:00 " + str(today)
                            await bot.send_message(chat_id=int(users['tg_id'][ind1]), text=answer)
                            report = "–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ " + switches['name'][ind] + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ " + str(today)
                            print(report)
                            f = open('report.txt', 'a')
                            f.write(report + "\n")
                            f.close()



    except FileNotFoundError:
        print('–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')



if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
